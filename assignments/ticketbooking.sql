-- Task 1: Database Design

create database ticketbookingsystem;
use ticketbookingsystem;

create database TicketBookingSystem;

use TicketBookingSystem;

create database TicketBookingSystem;

use TicketBookingSystem;

-- venue table
create table venue (
    venue_id int identity(1,1) primary key,
    venue_name varchar(100),
    address varchar(255)
);

-- event table
create table event (
    event_id int identity(1,1) primary key,
    event_name varchar(100),
    event_date date,
    event_time time,
    venue_id int,
    total_seats int,
    available_seats int,
    ticket_price decimal(10, 2),
    event_type varchar(20) check (event_type in ('Movie', 'Sports', 'Concert')),
    booking_id int,
    foreign key (venue_id) references venue(venue_id)
);

-- customer table
create table customer (
    customer_id int identity(1,1) primary key,
    customer_name varchar(100),
    email varchar(100),
    phone_number varchar(15),
    booking_id int
);

-- booking table
create table booking (
    booking_id int identity(1,1) primary key,
    customer_id int,
    event_id int,
    num_tickets int,
    total_cost decimal(10, 2),
    booking_date date,
    foreign key (customer_id) references customer(customer_id),
    foreign key (event_id) references event(event_id)
);



-- Task 2: Select, Where, Between, AND, LIKE

-- Insert sample records
insert into venue (venue_name, address) values
('Arena Center', '123 Main St'),
('Stadium Park', '456 Oak Rd'),
('Concert Hall', '789 Pine Ave'),
('Theater Plaza', '101 Maple St'),
('Grand Sports Arena', '202 Elm St');

insert into event (event_name, event_date, event_time, venue_id, total_seats, available_seats, ticket_price, event_type) values
('World Cup Final', '2025-12-20', '18:00:00', 1, 20000, 5000, 1500.00, 'Sports'),
('Rock Night', '2025-05-15', '20:00:00', 3, 5000, 3000, 1200.00, 'Concert'),
('Film Premiere', '2025-06-10', '19:00:00', 4, 800, 300, 2000.00, 'Movie'),
('Basketball Finals', '2025-07-05', '18:30:00', 2, 15000, 2000, 2500.00, 'Sports'),
('Opera Night', '2025-08-12', '19:30:00', 3, 1000, 800, 1800.00, 'Concert');

insert into customer (customer_name, email, phone_number) values
('John Doe', 'john.doe@example.com', '9876500001'),
('Jane Smith', 'jane.smith@example.com', '8765400002'),
('Alice Johnson', 'alice.johnson@example.com', '7654300003'),
('Bob Williams', 'bob.williams@example.com', '6543200004'),
('Mary Brown', 'mary.brown@example.com', '5432100005');

insert into booking (customer_id, event_id, num_tickets, total_cost, booking_date) values
(1, 1, 4, 6000.00, '2025-12-01'),
(2, 2, 2, 2400.00, '2025-05-01'),
(3, 3, 1, 2000.00, '2025-06-01'),
(4, 4, 5, 12500.00, '2025-07-01'),
(5, 5, 3, 5400.00, '2025-08-01');

-- 2. List all events
select * from event;

-- 3. Select events with available tickets
select * from event where available_seats > 0;

-- 4. Select events name partial match with 'cup'
select * from event where event_name like '%cup%';

-- 5. Select events with ticket price range between 1000 to 2500
select * from event where ticket_price between 1000 and 2500;

-- 6. Retrieve events with dates within a specific range
select * from event where event_date between '2025-06-01' and '2025-12-31';

-- 7. Retrieve events with available tickets that also have 'Concert' in their name
select * from event where available_seats > 0 and event_type = 'Concert';

-- 8. Retrieve users in batches of 5, starting from the 6th user
select * 
from customer
order by customer_id
offset 5 rows fetch next 5 rows only;

-- 9. Retrieve booking details with booked tickets more than 4
select * from booking where num_tickets > 4;

-- 10. Retrieve customer information whose phone number ends with '000'
select * from customer where phone_number like '%000';

-- 11. Retrieve events in order where seat capacity is more than 15000
select * from event where total_seats > 15000 order by total_seats;

-- 12. Select events name not start with 'x', 'y', 'z'
select * from event where event_name not like 'x%' and event_name not like 'y%' and event_name not like 'z%';


-- Task 3: Aggregate functions, Having, Order By, GroupBy and Joins

-- 1. List events and their average ticket prices
select event_type, avg(ticket_price) as avg_ticket_price
from event
group by event_type;

-- 2. Calculate the total revenue generated by events
select sum(total_cost) as total_revenue
from booking;

-- 3. Find the event with the highest ticket sales
select top 1 event_id, sum(num_tickets) as total_tickets_sold
from booking
group by event_id
order by total_tickets_sold desc;

-- 4. Calculate the total number of tickets sold for each event
select event_id, sum(num_tickets) as total_tickets_sold
from booking
group by event_id;

-- 5. Find events with no ticket sales
select event.event_id, event.event_name
from event
left join booking on event.event_id = booking.event_id
where booking.event_id is null;

-- 6. Find the user who has booked the most tickets
select top 1 customer_id, sum(num_tickets) as total_tickets
from booking
group by customer_id
order by total_tickets desc;

-- 7. List events and the total number of tickets sold for each month
select month(booking_date) as month, event_id, sum(num_tickets) as total_tickets
from booking
group by month(booking_date), event_id;

-- 8. Calculate the average ticket price for events in each venue
select venue_id, avg(ticket_price) as avg_ticket_price
from event
group by venue_id;

-- 9. Calculate the total number of tickets sold for each event type
select event_type, sum(num_tickets) as total_tickets_sold
from event
join booking on event.event_id = booking.event_id
group by event_type;

-- 10. Calculate the total revenue generated by events in each year
select year(booking_date) as year, sum(total_cost) as total_revenue
from booking
group by year(booking_date);

-- 11. List users who have booked tickets for multiple events
select customer_id
from booking
group by customer_id
having count(distinct event_id) > 1;

-- 12. Calculate the total revenue generated by events for each user
select customer_id, sum(total_cost) as total_revenue
from booking
group by customer_id;

-- 13. Calculate the average ticket price for events in each category and venue
select event_type, venue_id, avg(ticket_price) as avg_ticket_price
from event
group by event_type, venue_id;

-- 14. List users and the total number of tickets they've purchased in the last 30 days
select customer_id, sum(num_tickets) as total_tickets
from booking
where booking_date >= dateadd(day, -30, getdate())
group by customer_id;

-- Task 4: Subquery and its types

-- 1. Calculate the average ticket price for events in each venue using a subquery
select venue_id, (select avg(ticket_price)
                  from event as e
                  where e.venue_id = v.venue_id) as avg_ticket_price
from venue as v;

-- 2. Find events with more than 50% of tickets sold using a subquery
select event_id, event_name
from event
where total_seats * 0.5 < (select sum(num_tickets)
                           from booking
                           where booking.event_id = event.event_id);

-- 3. Calculate the total number of tickets sold for each event
select event_id, (select sum(num_tickets)
                  from booking as b
                  where b.event_id = e.event_id) as total_tickets_sold
from event as e;

-- 4. Find users who have not booked any tickets using a not exists subquery
select *
from customer as c
where not exists (select 1
                  from booking as b
                  where b.customer_id = c.customer_id);

-- 5. List events with no ticket sales using a not in subquery
select event_id, event_name
from event
where event_id not in (select event_id
                       from booking);

-- 6. Calculate the total number of tickets sold for each event type using a subquery in the from clause
select event_type, sum(total_tickets) as total_tickets_sold
from (select event_type, num_tickets as total_tickets
      from event
      join booking on event.event_id = booking.event_id) as sub
group by event_type;

-- 7. Find events with ticket prices higher than the average ticket price using a subquery in the where clause
select *
from event
where ticket_price > (select avg(ticket_price)
                      from event);

-- 8. Calculate the total revenue generated by events for each user using a correlated subquery
select c.customer_id,
       (select sum(total_cost)
        from booking as b
        where b.customer_id = c.customer_id) as total_revenue
from customer as c;

-- 9. List users who have booked tickets for events in a given venue using a subquery in the where clause
select *
from customer
where customer_id in (select customer_id
                      from booking
                      where event_id in (select event_id
                                         from event
                                         where venue_id = 1));

-- 10. Calculate the total number of tickets sold for each event category using a subquery with group by
select e.event_type,
       (select sum(b.num_tickets)
        from booking as b
        where b.event_id = e.event_id) as total_tickets_sold
from event as e
group by e.event_type, e.event_id;


-- 11. Find users who have booked tickets for events in each month using a subquery with date_format
select customer_id, format(booking_date, 'yyyy-MM') as month
from booking
group by customer_id, format(booking_date, 'yyyy-MM');

-- 12. Calculate the average ticket price for events in each venue using a subquery
select venue_id, (select avg(ticket_price)
                  from event as e
                  where e.venue_id = v.venue_id) as avg_ticket_price
from venue as v;

